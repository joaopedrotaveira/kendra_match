<?php
function _kendra_match_recommender_search_general($type = NULL, $query = NULL, $filter = NULL, $sort = NULL, $page = 0, $page_size = 10) {
  $results = array(); switch (strtolower($type)) {
  case 'mediaitem':
  case 'mediaitems':
      $results = _kendra_match_recommender_recommend_content($query, $filter, $sort, $page, $page_size);
      break;
    case 'user':
      if (empty($query)) {
        $results = _kendra_match_recommender_recommend_users($query, $filter, $sort, $page, $page_size);
      }
      else {
        $results = _kendra_match_recommender_search_users($query, $filter, $sort, $page, $page_size);
      }
      break;

    default:
      // echo input
      $results = compact('type', 'query', 'filter', 'sort');
  }
  return $results;
}

/**
 * pull recommended users from `kendra_match_recommender_out_user_to_user` for the current user
 */
function _kendra_match_recommender_recommend_users($query = NULL, $filter = NULL, $sort = NULL, $page = 0, $page_size = 3) {
  $results     = array();
  $safe_query  = check_plain($query);
  $safe_sort   = check_plain($sort);
  $safe_filter = check_plain($filter);

  //@FIXME: override paging vars, that appear to be NULL
  $page = 0;
  $page_size = 3;

  global $user;
  $uid = $user->uid;

  // #79 - show name, affinity and networks (link to add on that network)
  $results = db_query("SELECT r.recommended_uid as uid, r.weight as affinity,
    u.name as name, f.fbu as facebook
    FROM {kendra_match_recommender_out_user_to_user} r
    INNER JOIN {users} u ON u.uid = r.recommended_uid
    LEFT JOIN {fb_user} f ON f.uid = r.recommended_uid
    WHERE u.status = 1 and r.uid = :uid", array(':uid' => $uid));

  //return $result->fetchAllAssoc('uid');
  $rec = array();
  foreach ($results->fetchAllAssoc('uid') as $r) {
    if (!empty($r->facebook)) {
      $r->networks['facebook'] = 'http://www.facebook.com/' . $r->facebook;
    }
    unset($r->facebook);
    $rec[] = (array) $r;
  }
  return $rec;


  // TODO: remove/refactor original code?
  $sql = sprintf("SELECT users.name, recommended_uid FROM {kendra_match_recommender_out_user_to_user}
       INNER JOIN users ON users.uid=kendra_match_recommender_out_user_to_user.uid
       WHERE users.uid = %d and status = 1
       ORDER BY weight DESC, time DESC LIMIT %s, %s
       ", $uid, $page, $page_size);

  $result = db_query($sql);

  $uids = array();

  foreach ($result as $node) {
    $uids[] = $node->recommended_uid;
  }

  //$results = user_load_multiple($uids);
  $results = array();
  return $uids;

  return $results;
}

/**
 * pull recommended content from `kendra_match_recommender_out_user_to_item` for the current user
 * @todo filter by user preferences
 */
function _kendra_match_recommender_recommend_content($query = NULL, $filter = NULL, $sort = NULL, $page = 0, $page_size = 10) {
  global $user;
  $uid = $user->uid;

  $search_results      = array();
  $sort_allowed_values = array('affinity', 'rating', 'updated', 'newest', 'watched');
  $results             = array();
  $safe_query          = check_plain($query);
  $safe_sort           = check_plain($sort);
  $safe_filter         = _kendra_match_recommender_search_preferences();
  $fields    = '';
  $from      = '{node} node';
  $joins     = '';
  $where     = "(node.status=1 OR node.uid=$uid)";
  $order     = '';
  
  // @todo fix NULL parameters passed via querystring
  if (!$page) $page = 0;
  if (!$page_size) $page_size = 10;
  
  if (!empty($filter)) {
    $filter = drupal_json_decode($filter, 1);
    $safe_filter = array_merge($safe_filter, $filter);
  }

  if (!in_array($safe_sort, $sort_allowed_values)) {
    $safe_sort = '';
  }

  if (!empty($safe_query)) {
    // add search clause
    $where .= sprintf(" AND node.type='mediaitem' AND node.title like '%%%s%%'", $safe_query);
    
    // Add keyword to implicit profile
    _kendra_saracen_save_recommend($user->uid, NULL, 'keyword', $safe_query, FALSE, NULL, 'implicit');
  } else {
    $where .= " AND node.type='mediaitem'";
    if (empty($safe_sort)) {
      $safe_sort = 'affinity';
    }
  }

  switch ($safe_sort) {
    case 'rating':
    default:
      $fields .= 'DISTINCT node.nid AS id';
      $joins .= "LEFT JOIN {votingapi_cache} vv ON (vv.entity_id=node.nid AND (vv.tag = 'vote' OR vv.tag IS NULL))";
      $order .= 'vv.value DESC, node.changed DESC';
      break;

    case 'updated':
    case 'newest':
      $fields .= 'DISTINCT node.nid AS id';
      $order .= 'node.changed DESC';
      break;

    case 'affinity':
      $fields .= 'DISTINCT node.nid AS id';
      $joins .= sprintf('LEFT JOIN {kendra_match_recommender_out_user_to_item} recommendations
      ON (recommendations.recommended_nid=node.nid AND (recommendations.uid = %d or recommendations.uid IS NULL))', $uid);
      $order .= 'weight DESC, time DESC, node.changed DESC';
      break;

    case 'watched':
      $fields .= 'DISTINCT node.nid AS id';
      $joins .= 'INNER JOIN {field_data_field_mediaitem_identifier} mediaitem_identifier ON (mediaitem_identifier.entity_id=node.nid)';
      $joins .= 'LEFT JOIN {kendra_mediaitem_watch} watchlist ON (watchlist.media_id=mediaitem_identifier.entity_id)';
      $order .= 'count(media_id) DESC, node.changed DESC';
      break;
  }
  
  $sql = sprintf("SELECT %s FROM %s %s
      WHERE %s
      ORDER BY %s
      LIMIT %s, %s
      ", $fields, $from, $joins, $where, $order, $page, $page_size);

  $search_results = db_query($sql);

  foreach ($search_results as $result) {
    if (_kendra_match_recommender_filter_content_by_prefs($result->node, $safe_filter)) {
      $results[] = _kendra_saracen_trial_mod_get_mediaitem($result->id);
    }
  }

  return $results;
}

/**
 * search users
 */
function _kendra_match_recommender_search_users($query = NULL, $filter = NULL, $sort = NULL, $page = 0, $page_size = 10) {
  $search_results = array();
  $safe_query     = check_plain($query);
  $safe_sort      = check_plain($sort);
  $safe_filter    = check_plain($filter);

  // Invoke the search hook to generate results
  // @todo incorporate $safe_sort, $safe_filter
  $search_results = module_invoke('user', 'search_execute', $safe_query);
  return $search_results;
}

/**
 * helper function to get the leaf value of a multilingual Drupal object
 */
function _drupal_object_get_value(&$obj) {
  foreach ($outer as $lc => $arr) {
    foreach ($arr as $inner) {
      if (property_exists($inner, $value)) {
        return $inner->value;
      }
    }
  }
  return NULL;
}

/**
 * filter node set according to user's prefs
 * @todo maybe this could be done as parameters to search_execute
 */
function _kendra_match_recommender_filter_content_by_prefs(&$node, &$prefs) {
  $pass = TRUE;
  global $user;
  $uid = !empty($user) ? $user->uid : null;

  if ($prefs['friends-content']) {
    // @todo
  }
  if ($prefs['friends-interacted']) {
    // @todo
  }
  if (!is_true($prefs['3d'])) {
    if (isset($node->field_mediaitem_3d)) {
      $val = _drupal_object_get_value($node->field_mediaitem_3d);
      if (!is_true($val)) {
        return FALSE;
      }
    }
  }
  if (is_true($prefs['3d-only'])) {
    if (isset($node->field_mediaitem_3d)) {
      $val = _drupal_object_get_value($node->field_mediaitem_3d);
      if (!is_true($val)) {
        return FALSE;
      }
    }
    else {
      return FALSE;
    }
  }

  return $pass;
}

function is_true($truthval) {
  if ($truthval === TRUE) return $truthval;
  switch (strtolower($truthval)) {
    case 'yes':
    case 'true':
    case '1':
    return true;
    default:
    return false;
  }
}

/**
 * get the current user's search preferences
 * @todo override defaults with current user's prefs
 */
function _kendra_match_recommender_search_preferences() {
  global $user;
  $defaults = array(
    'friends-content' => FALSE,
    'friends-interacted' => FALSE,
    '3d' => TRUE,
    '3d-only' => FALSE,
  );

  return $defaults;
}
